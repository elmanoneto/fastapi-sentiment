"""add created_at to messages

Revision ID: ee42a18a3a7d
Revises: edf7d957bbd8
Create Date: 2025-05-18 15:00:59.539227

"""

from datetime import datetime, timezone
from typing import Sequence, Union

import sqlalchemy as sa
from sqlalchemy.engine import Connection

from alembic import op

# revision identifiers, used by Alembic.
revision: str = "ee42a18a3a7d"
down_revision: Union[str, None] = "edf7d957bbd8"
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    bind: Connection = op.get_bind()
    dialect = bind.dialect.name

    if dialect == "sqlite":
        # 1. Adiciona coluna nullable
        op.add_column(
            "messages",
            sa.Column("created_at", sa.DateTime(timezone=True), nullable=True),
        )

        # 2. Preenche registros existentes com a data atual
        now = datetime.now(timezone.utc).isoformat(sep=" ")
        bind.execute(
            sa.text("UPDATE messages SET created_at = :now").bindparams(now=now)
        )

        # SQLite não permite alterar coluna para NOT NULL, então deixamos nullable no banco
        # Você pode validar isso via ORM (no Pydantic por exemplo)

    else:
        # PostgreSQL permite adicionar com NOT NULL + DEFAULT
        op.add_column(
            "messages",
            sa.Column(
                "created_at",
                sa.DateTime(timezone=True),
                nullable=False,
                server_default=sa.text("CURRENT_TIMESTAMP"),
            ),
        )


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column("messages", "created_at")
